package com.example.demo;

import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.InputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import java.util.Map;
import java.util.HashMap;
import java.util.Arrays;

@RestController
public class HelloWorldController {

    // 1A
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> pairIdx = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if (pairIdx.containsKey(target - num)) {
                return new int[] { i, pairIdx.get(target - num) };
            }
            pairIdx.put(num, i);
        }

        return new int[] {};        
    }

    private String loadHtml(String filename) throws IOException {
        try (InputStream is = getClass().getClassLoader().getResourceAsStream("static/" + filename)) {
            if (is == null) {
                throw new IOException("File not found in classpath: static/" + filename);
            }
            return StreamUtils.copyToString(is, StandardCharsets.UTF_8);
        }
    }

    @RequestMapping("/add")
    public String addNumbers() throws IOException {
        int a = 7;
        int b = 5;
        int sum = a + b;
        return String.valueOf(sum);
    }

    @RequestMapping
    public String helloWorld() throws IOException {
        return loadHtml("helloWorld.html");
    }

    @RequestMapping("/chess")
    public String chess() throws IOException {
        return loadHtml("chess.html");
    }

    @RequestMapping("/calculator")
    public String calculator() throws IOException {
        return loadHtml("calculator.html");
    }

    @RequestMapping("/sass_")
    public String sass_() throws IOException {
        return loadHtml("sass_.html");
    }

    @RequestMapping("/maze")
    public String maze() throws IOException {
        return loadHtml("maze.html");
    }

    @RequestMapping("/codepen")
    public String codepen() throws IOException {
        return loadHtml("codepen.html");
    }

    @RequestMapping("/tilt_maze")
    public String tilt_maze() throws IOException {
        return loadHtml("tilt_maze.html");
    }

    @RequestMapping("/tic_tac_toe")
    public String tic_tac_toe() throws IOException {
        return loadHtml("tic_tac_toe.html");
    }

    @RequestMapping("/clock")
    public String clock() throws IOException {
        return loadHtml("clock.html");
    }

    @RequestMapping("/hangman")
    public String hangman() throws IOException {
        return loadHtml("hangman.html");
    }

    @RequestMapping("/puzzles")
    public String puzzles() throws IOException {
        return loadHtml("puzzles.html");
    }

    @RequestMapping("/sudoku")
    public String sudoku() throws IOException {
        return loadHtml("sudoku.html");
    }

    @RequestMapping("/virtual_keyboard")
    public String virtual_keyboard() throws IOException {
        return loadHtml("virtual_keyboard.html");
    }

    @RequestMapping("/solitaire")
    public String solitaire() throws IOException {
        return loadHtml("solitaire.html");
    }

    @RequestMapping("/dino")
    public String dino() throws IOException {
        return loadHtml("dino.html");
    }

    @RequestMapping("/1A")
    public String testTwoSum() throws IOException {
        int[][] testInputs = {
                {3, 3},                     
                {-1, -2, -3, -4},          
                {1000000000, 1000000000},  
                {1, 5, 7, 9},               
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
                {0, 4, 3, 0},                
                {3, 3},
                {-1, -2, -3, -4},
                {1000000000, 1000000000},
                {1, 5, 7, 9},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
                {0, 4, 3, 0},
                {1000000000, -1000000000, 500000000, -500000000},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
                {1, 5, 7, 8},
                {1000000000, -1000000000},
                {2, 7, 11, 15},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
                {1, 5, 7, 11},
                {5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
                {3, 2, 4},
                {15, 11, 7, 2},
                {1000000000, -1000000000, 2000000000, -2000000000},
                {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000},
                {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100},
                {-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5},
                {-10, -20, -30, -40, -50, -60, -70, -80, -90, -100},
                {-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20},
                {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119},
                {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
                {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2},
                {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500},
                {1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
                {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99},
                {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500},
                //{-1000000000, -2000000000, -3000000000, -4000000000, -5000000000, -6000000000, -7000000000, -8000000000, -9000000000, -10000000000},
                {23, 8, 15, 37, 48, 5, 21, 7, 40, 6},
                {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200},
                {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
                {2, 5, 1, 9, 3, 8, 7, 6, 4, 0},
                {1000000000, -1000000000, 500000000, 500000000},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
                {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39},
                {-1000000000, 1000000000, 500000000, -500000000},
                {1000000000, 999999999, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
                {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200},
                {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59},
                {5, 12, 7, 3, 9, 14, 10, 23, 1, 11},
                {-3, 4, 3, 90, -11, 23, -5, 67, 100, -45, 89},
                {-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2},
                {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000},
                {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30},
                {123456789, 987654321, 456789123, 321987654, 654321987, 789123456},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {-1, -2, -3, -4, -5, -6, -7, -8, -9, -10},
                {999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992},
                {-1, -2, -3, -4, -5, -6, -7, -8, -9, -10},
                {1000000000, -1000000000, 500000000, 500000000, -500000000, -500000000, 1, 2, 3, 4},
                {1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30},
                {-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20},
                {1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000, 30000},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
                {1000000000, -500000000, 2000000000, -1000000000, 0, 500000000},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
                {999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990},
                {1, 2, 4, 8, 16, 32, 64, 128, 256, 512},
                {-1, -2, -3, -4, -5, -6, -7, -8, -9, -10},
                {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500},
                {-1, -2, -3, -4, -5, -6, -7, -8, -9, -10},
                {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39},
                //{1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000, 7000000000, 8000000000, 9000000000, 10000000000},
                {-3, -1, 0, 2, 5, 7, 8, 10},
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50},
                {29, 37, 10, 55, 44, 3, 67, 90, 11, 38, 2, 9, 100, 34, 65, 23, 89, 12, 33, 22}
        };
        int[] targets = {
                6, -6, 2000000000, 12, 19, 0, 6, -8, 2000000000, 10, 3, 0, 0, 17, 15, 0, 9, 19, 16, 10, 6, 9, 0, 4000, 100, 199, 0, -150, -39, 110, 1100, 70, 3, 3000, 30000, 39, 99, 900, 33, 390, 1500, 21, 17, 0, 29, 38, 78, 0, 1999999999, 300, 100, 22, 53, -199, 1, 3, 1990, 59, 1111111110, 0, -11, 1999999997, -15, 0, 2000000000, 299, 59, -31, 60000, 39, 1000000000, 99, 49, 1999999989, 513, -18, 1300, -17, 1900, 0, 79, 4, 100, 62
        };
        String[] outputs = {"[0, 1]", "None", "[0, 1]", "[0, 3]", "[0, 1]", "[0, 3]", "[0, 1]", "[7, 8]", "[2, 3]", "[0, 1]", "[0, 1]", "[8, 9]", "[1, 3]", "[0, 1]", "[1, 2]", "[2, 3]", "[0, 1]", "[18, 20]", "[24, 25]", "[98, 99]", "[4, 6]", "[6, 7]", "[18, 19]", "[26, 28]", "[4, 5]", "[16, 18]", "[18, 19]", "[18, 19]", "[13, 15]", "[13, 15]", "[18, 19]", "[49, 50]", "[43, 45]", "None", "[18, 19]", "[6, 7]", "[9, 10]", "[3, 5]", "[0, 1]", "[13, 14]", "[17, 19]", "None", "[0, 1]", "[0, 1]", "[13, 15]", "[24, 25]", "[1, 6]", "None", "[98, 99]", "[29, 30]", "[0, 1]", "[4, 5]", "[6, 7]", "[0, 1]", "[13, 15]", "[28, 29]", "[14, 15]", "None", "[18, 19]", "[2, 3]", "[48, 49]", "[23, 24]", "[4, 5]", "[6, 7]", "[0, 9]", "[7, 9]", "[5, 6]", "[7, 8]", "[8, 9]", "[0, 1]", "None", "[1, 4]", "None", "[0, 18]"
        };

        StringBuilder result = new StringBuilder();
        for (int i = 0; i < testInputs.length; i++) {
            int[] input = testInputs[i];
            int target = targets[i];

            int[] res = twoSum(input, target);
            String actualOutput = res.length == 0 ? "None" : Arrays.toString(res);
            String expectedOutput = outputs[i];
            result.append("Input: ").append(Arrays.toString(input))
                .append(" => Output (target ").append(target).append("): ");
            result.append(actualOutput).append("<br>")
            .append(actualOutput.equals(expectedOutput))
            .append("<br><hr>");
        }
        return result.toString();
    }


}
