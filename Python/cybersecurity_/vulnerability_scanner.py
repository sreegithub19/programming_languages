import socket
from concurrent.futures import ThreadPoolExecutor
import argparse

def check_port(ip, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            s.connect((ip, port))
            print(f"[+] Port {port} is open on {ip}")
            return True
    except:
        return False

def scan_ports(ip, ports):
    print(f"Scanning {ip} for open ports...")
    open_ports = []
    with ThreadPoolExecutor(max_workers=10) as executor:
        results = executor.map(lambda port: check_port(ip, port), ports)
        for port, is_open in zip(ports, results):
            if is_open:
                open_ports.append(port)
    print(f"Open ports: {open_ports}")
    return open_ports

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Basic Vulnerability Scanner")
    parser.add_argument("--ip", required=True, help="Target IP address to scan")
    parser.add_argument("--start-port", type=int, default=1, help="Start of port range (default: 1)")
    parser.add_argument("--end-port", type=int, default=1024, help="End of port range (default: 1024)")
    args = parser.parse_args()

    target_ip = args.ip
    port_range = range(args.start_port, args.end_port + 1)
    scan_ports(target_ip, port_range)