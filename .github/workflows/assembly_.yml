name: Build and Run Assembly Code

on:
  push:
    branches:
      - main

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install NASM
      run: sudo apt-get update && sudo apt-get install -y nasm gcc binutils


    - name: Assemble the code, Link the object file, Run the program again
      run: |
        #!/bin/bash
        cd assembly_

        for asm_file in *.asm; do
            # Check if the file exists
            if [ -f "$asm_file" ]; then
                echo "Assembling and running $asm_file..."

                # Get the file name without the extension
                filename=$(basename -- "$asm_file")
                filename_noext="${filename%.*}"

                # Assemble the file using NASM (assuming it's x86-64, adjust for other architectures)
                nasm -f elf64 "$asm_file" -o "$filename_noext.o"
                
                # Link the object file to create an executable
                ld "$filename_noext.o" -o "$filename_noext"

                # Run the resulting executable
                ./"$filename_noext"

                # Clean up the object and executable files after running
                rm "$filename_noext.o" "$filename_noext"
            fi
        done

        cd assembly_gcc
        nasm -f elf64 -o bubble_sort.o bubble_sort.asm
        gcc -no-pie -o bubble_sort bubble_sort.o -lc
        ./bubble_sort

        cd ../..

    - name: Create and run inline assembly script
      run: |
          #!/bin/bash
  
          # Create assembly code as a string
          asm_code='section .data
                    msg db "Hello, Assembly!", 0
  
                    section .text
                    global _start
  
                    _start:
                      ; Write the message to stdout
                      mov eax, 4            ; sys_write
                      mov ebx, 1            ; file descriptor 1 (stdout)
                      mov ecx, msg          ; message to write
                      mov edx, 15           ; message length
                      int 0x80              ; call kernel
  
                      ; Exit the program
                      mov eax, 1            ; sys_exit
                      xor ebx, ebx          ; exit code 0
                      int 0x80              ; call kernel
          '
  
          # Assemble the code and link it to create an executable
          echo "$asm_code" | nasm -f elf32 -o inline_assembly.o -
          ld -m elf_i386 inline_assembly.o -o inline_assembly
  
          # Run the executable
          ./inline_assembly
          
    - name: Assemble the code, Link the object file, Run the program again inline
      run: |
       #!/bin/bash
       cd assembly_
       chmod +x run_asm.sh
       ./run_asm.sh
       cd ..

    - name: Upload file as artifact
      uses: actions/upload-artifact@v4
      with:
           name: captured-html-artifacts
           path: |
            assembly_/hello.asm