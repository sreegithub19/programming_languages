name: Spring_boot_web_apps_gradle_java_applications

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest


    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root --password=example --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: example
          MYSQL_DATABASE: sample_db
          MYSQL_USER: sample_user
          MYSQL_PASSWORD: sample_password

    strategy:
      matrix:
        java-version: ['21']

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          java-package: 'jdk'
          architecture: 'x64'
          check-latest: false
          overwrite-settings: true
          job-status: 'success'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install playwright
          playwright install --with-deps

      - name: Verify Java version
        run: java -version

      - name: Set up Maven
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u root --password=example --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Install MySQL client
        run: sudo apt-get update && sudo apt-get install -y mysql-client

      # Step 2: Build the Spring Boot application
      - name: Build Spring Boot Application
        run: |
          cd java/spring_boot_web_apps_gradle/java_applications
          mvn clean package

      # Step 3: Run Spring Boot Application in the Background
      - name: Run Spring Boot App in Background with ngrok
        run: |
          # Start Spring Boot application
          cd java/spring_boot_web_apps_gradle/java_applications
          java -jar target/*.jar &
          echo "Spring Boot app started in the background."
          sleep 5 # Give the app a few seconds to start

          # Install ngrok
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list >/dev/null
          sudo apt update && sudo apt install ngrok

          # Authenticate ngrok using the authtoken from GitHub Secrets
          ngrok authtoken 2whue6P5qFygcTJjinX37XDBpTN_YUPyCQTL9pWdzG5KQsTb

          # Start ngrok to expose localhost:8090
          ngrok http 8090 > /dev/null &

          # Wait for ngrok to initialize and fetch public URL
          sleep 5
          NGROK_PUBLIC_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "ngrok public URL: $NGROK_PUBLIC_URL"

          # Keep Spring Boot and ngrok running for 5 minutes
          echo "Spring Boot and ngrok are running. Open $NGROK_PUBLIC_URL in your browser."
          sleep 20 # 1 minutes

      # Step 4: Take Website Snapshot
      - name: Take Website Snapshot
        run: |
         python -c "
         from playwright.sync_api import sync_playwright
         import time
         import os

         PORT = 8090

         li = ['/' , '/chess' , '/calculator' , '/sass_' , '/maze' , '/codepen' , '/tilt_maze' , '/tic_tac_toe' , '/clock' , '/hangman' , '/puzzles' , '/sudoku' , '/virtual_keyboard' , '/solitaire' , '/dino']

         for i in li:
            URL = f'http://localhost:{PORT}{i}'
            SNAPSHOT_PATH = f'snapshots/website_snapshot_{i}.png'
            WAIT_SECONDS = 7

            print('Waiting for application to be ready...')
            time.sleep(WAIT_SECONDS)

            with sync_playwright() as p:
                browser = p.chromium.launch()
                page = browser.new_page()
                try:
                    page.goto(URL, timeout=10000) # Increased timeout
                    page.screenshot(path=SNAPSHOT_PATH, full_page=True)
                    print(f'Snapshot saved to {SNAPSHOT_PATH}')
                except Exception as e:
                    print(f'Error taking snapshot: {e}')
                finally:
                    browser.close()

         print('Snapshotting complete.')
          "

      # Step 5: Run Maven Tests
      - name: Run Maven Tests
        run: |
          cd java/spring_boot_web_apps_gradle/java_applications
          mvn test

      # Step 6: Upload Snapshot Artifact
      - name: Upload snapshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: snapshots
          path: snapshots