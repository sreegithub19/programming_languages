name: Robot Workflow

on:
  push:
    branches:
      - main_

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies and Run tests
      run: |
        cd Python/robot_
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        robot search_test.robot  # Run the .robot file
        cd ../..

# To get API keys:
  # Chatgpt : https://platform.openai.com/api-keys
  # Gemini : https://console.cloud.google.com/apis/credentials?project=gen-lang-client-0816797577&pli=1
  # New Gemini: https://console.cloud.google.com/apis/credentials?project=concise-decker-469715-q7&pli=1
  # Github copilot (uses OpenAI key) : https://platform.openai.com/api-keys
    - name: Run AI_generated image creation using Python (using Gemini)
      run: |
        pip install openai==0.28
        mkdir imagery
        # python Python/ML_AI/openai_prompt.py (Error: Connection error.) 
        # python Python/ML_AI/github_copilot_prompt.py (pip install openai==0.28) (openai.error.APIConnectionError: Error communicating with OpenAI: HTTPSConnectionPool(host='api.openai.com', port=443): Max retries exceeded)
        python Python/ML_AI/gemini_images.py ${{ secrets.GEMINI_SECRET }}

    - name: Upload file as artifact
      uses: actions/upload-artifact@v4
      with:
           name: captured-html-artifacts
           path: |
            imagery


    - name: Run rfdebug
      run: |
        pip install robotframework-debuglibrary
        variable1=value1 variable2=value2 bash -c '
        #!/bin/bash
        # Accept variables as parameters
        variable1=$variable1
        variable2=$variable2

        # Pass variables to rfdebug
        rfdebug <<EOF
        \${variable1}    Set Variable    ${variable1}
        \${variable2}    Set Variable    ${variable2}

        Log To Console    variable1: ${variable1}
        Log To Console    variable2: ${variable2}
        exit
        EOF
        '
